
version: "3.7"
services:

  db:
    container_name: postgre_sql
    build: ./postgresql
    restart: always
    ports:
      - 50004:5432

  rabbit:
    container_name: rabbit_mq
    build: ./rabbit
    restart: always
    ports:
      - 50002:15672


  mail_srv:
    container_name: mail_srv
    build:
      context: ./
      dockerfile: Dockerfile.mail-srv
    restart: always

  identity_srv:
    container_name: identity_srv
    build:
      context: ./
      dockerfile: Dockerfile.identity-srv
    restart: always
    depends_on:
      - db
      - mail_srv
    links:
      - db
      - mail_srv

  gallery_proxy:
    container_name: gallery_proxy
    build:
      context: ./
      dockerfile: Dockerfile.gallery-proxy
    restart: always
    depends_on:
      - db
    links:
      - db

  operation_proxy:
    container_name: operation_proxy
    build:
      context: ./
      dockerfile: Dockerfile.operation-proxy
    restart: always
    depends_on:
      - db
      - rabbit
      - mail_srv
    links:
      - db
      - rabbit
      - mail_srv

  product_proxy:
    container_name: product_proxy
    build:
      context: ./
      dockerfile: Dockerfile.product-proxy
    restart: always
    depends_on:
      - db
      - rabbit
      - mail_srv
      - gallery_proxy
    links:
      - db
      - rabbit
      - mail_srv
      - gallery_proxy


  admin_gw:
    container_name: admin_gw
    build:
      context: ./
      dockerfile: Dockerfile.admin-gw
    restart: always
    depends_on:
      - rabbit
      - product_proxy
      - identity_srv
      - gallery_proxy
      - operation_proxy
    links:
      - rabbit
      - product_proxy
      - identity_srv
      - gallery_proxy
      - operation_proxy


  showcase_gw:
    container_name: showcase_gw
    build:
      context: ./
      dockerfile: Dockerfile.showcase-gw
    restart: always
    depends_on:
      - rabbit
      - product_proxy
      - gallery_proxy
      - operation_proxy
    links:
      - rabbit
      - product_proxy
      - gallery_proxy
      - operation_proxy


  admin_ui:
    container_name: admin_ui
    build:
      context: ./
      dockerfile: Dockerfile.admin-ui
    restart: always
    depends_on:
      - admin_gw
    links:
      - admin_gw
    volumes:
      - ./apps/admin-ui/nginx/conf.d:/etc/nginx/conf.d:ro
    environment:
      - NODE_ENV=production


  showcase_ui:
    container_name: showcase_ui
    build:
      context: ./
      dockerfile: Dockerfile.showcase-ui
    restart: always
    depends_on:
      - showcase_gw
    links:
      - showcase_gw
    volumes:
      - ./apps/showcase-ui/nginx/conf.d:/etc/nginx/conf.d:ro
    environment:
      - NODE_ENV=production


#  prerender:
#    container_name: prerender
#    build:
#      context: ./
#      dockerfile: Dockerfile.prerender-srv
#    restart: always
#    depends_on:
#      - showcase_ui
#    links:
#      - showcase_ui
#    ports:
#      - 8080:8080


  certbot:
    user: root
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:rw
      - ./data/certbot/www:/var/www/certbot:rw
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'

  proxy:
    user: root
    container_name: proxy
    build: ./nginx
    restart: unless-stopped
    depends_on:
      - admin_ui
      - showcase_ui
      - prerender
    links:
      - admin_ui
      - showcase_ui
      - prerender
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/init-letsencrypt.sh:/etc/nginx/init-letsencrypt.sh
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
